Compiler flags
**************


Specifying flags on the command line
====================================

To add C++ compiler flags to a cmany build, use the command line
option "--cxxflags/-X". To prevent these flags being interpreted as
cmany command options, use quotes or single quotes:

   $ cmany b -X "--Wall","-O3"      # add -Wall -O3 to all builds

To add C compiler flags, use the option "--cflags/-C". As with C++
flags, use quotes to escape:

   $ cmany b -C "--Wall","-O3"

The flags specified this way will be used across the board in all the
individual builds produced by the cmany command.

You may have noticed that setting CMake cache variables will allow you
also to specify macros and compiler flags as well via
"-DCMAKE_CXX_FLAGS=...". Yes, that's right, you can also do that. But
not only is it less verbose when passing macros and flags through "--
defines/--cflags/--cxxflags": there is a strong reason to prefer it
this way: **flag aliases**.


Flag aliases
============

For simplicity of use, cmany comes with a predefined set of flag
aliases which you can use. A flag alias is a name which maps to
specific flags for each compiler. For example, if you want to enable
maximum warnings there is the "wall" alias (shown here in the sort-of-
yml markup which cmany uses to define it):

   wall:
       desc: turn on all warnings
       gcc,clang,icc: -Wall
       vs: /Wall

or the "avx" alias if you want to enable AVX SIMD processing:

   avx:
       desc: enable AVX instructions
       gcc,clang,icc: -mavx
       vs: /arch:avx

This allows you to use the aliases instead of the flags directly, thus
insulating you from differences between compilers. For example, the
following command will translate to "g++ -mavx -Wall" with gcc, clang
or icc, but with Visual Studio it will translate instead to "cl.exe
/Wall /arch:avx":

   $ cmany b --cxxflags avx,wall

Note that flag aliases are translated only when they are given through
"--cxxflags/-cflags". Do not use aliases with "--vars
CMAKE_CXX_FLAGS=...", as cmany will not translate them there.


Built-in aliases
================

cmany provides built-in flag aliases to simplify working with
different compilers at the same time. Currently, you can see them in
the file "src/c4/cmany/flags.yml".


Defining more flag aliases
==========================

A feature under current development is being able to define your own
aliases. For now, you can submit PRs for adding aliases.
